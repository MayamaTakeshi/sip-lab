const sip = require ('../index.js')
const Zeq = require('@mayama/zeq')
const m = require('data-matching')
const sip_msg = require('sip-matching')
const uuid = require('uuid')

// here we create our Zeq instance
var z = new Zeq()


async function test() {
    z.trap_events(sip.event_source, 'event', (evt) => {
        var e = evt.args[0]
        return e
    })

    sip.set_codecs("pcmu/8000/1:128,pcma/8000/1:128,gsm/8000/1:128")

    console.log(sip.start((data) => { console.log(data)} ))

    const t1 = sip.transport.create({address: "127.0.0.1"})
    const t2 = sip.transport.create({address: "127.0.0.1"})

    console.log("t1", t1)
    console.log("t2", t2)

    const call_id = uuid.v4()

    var oc = sip.call.create(t1.id, {
        from_uri: 'sip:alice@test.com',
        to_uri: `sip:bob@${t2.address}:${t2.port}`,
        headers: {
            'Call-ID': call_id,
            'Supported': 'timer',
            'Min-SE': '180',
            'Session-Expires': '180',
        },
    })

    await z.wait([
        {
            event: "incoming_call",
            call_id: m.collect("call_id"),
            transport_id: t2.id,
            msg: sip_msg({
                $rU: 'bob',
                $fU: 'alice',
                $tU: 'bob',
                $fd: 'test.com',
		$ci: call_id,
                hdr_supported: 'timer',
                hdr_min_se: '180',
                hdr_session_expires: '180',
            })
        },
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '100',
                $rr: 'Trying',
            }),
        },
    ], 1000)
 

    var ic = {
        id: z.store.call_id,
        sip_call_id: z.store.sip_call_id,
    }

    sip.call.respond(ic.id, {
        code: 422,
        reason: 'Session Timer Too Small',
        headers: {
            'Supported': 'timer',
            'Min-SE': '300',
            'Session-Expires': '300;refresher=uac',
        },
    })

    await z.wait([
        {
            event: 'call_ended',
            call_id: ic.id,
        },
        {
            event: 'call_ended',
            call_id: oc.id,
        },
        {
            event: 'response',
            call_id: 0,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '422',
                $rr: 'Session Timer Too Small',
                hdr_supported: 'timer',
                hdr_min_se: '300',
                hdr_session_expires: '300;refresher=uac',
            }),
        },
    ], 1000)

    oc = sip.call.create(t1.id, {
        from_uri: 'sip:alice@test.com',
        to_uri: `sip:bob@${t2.address}:${t2.port}`,
        headers: {
            'Call-ID': call_id,
            'Supported': 'timer',
            'Min-SE': '300',
            'Session-Expires': '300',
        },
    })

    delete z.store.call_id

    await z.wait([
        {
            event: "incoming_call",
            call_id: m.collect("call_id"),
            transport_id: t2.id,
            msg: sip_msg({
                $rU: 'bob',
                $fU: 'alice',
                $tU: 'bob',
                $fd: 'test.com',
		$ci: call_id,
                hdr_supported: 'timer',
                hdr_min_se: '300',
                hdr_session_expires: '300',
            })
        },
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '100',
                $rr: 'Trying',
            }),
        },
    ], 1000)
 
    ic = {
        id: z.store.call_id,
        sip_call_id: z.store.sip_call_id,
    }

    sip.call.respond(ic.id, {
        code: 200,
        reason: 'OK',
        headers: {
            'Supported': 'timer',
            'Min-SE': '300',
            'Session-Expires': '300;refresher=uac',
        },
    })

    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
                hdr_supported: 'timer',
                hdr_min_se: '300',
                hdr_session_expires: '300;refresher=uac',
            }),
        },
        {
            event: 'media_update',
            call_id: oc.id,
            status: 'ok',
        },
        {
            event: 'media_update',
            call_id: ic.id,
            status: 'ok',
        },
    ], 1000)

    await z.sleep(1000)

    sip.call.update(oc.id, {
        headers: {
            'Supported': 'timer',
            'Min-SE': '300',
            'Session-Expires': '300',
        },
    })

    await z.wait([
        {
            event: 'request',
            call_id: ic.id,
            msg: sip_msg({
                $rm: 'UPDATE',
                hdr_supported: 'timer',
            	hdr_min_se: '300',
                hdr_session_expires: '300',
            }),
        },
    ], 1000)

    sip.call.respond(ic.id, {
        code: 200,
        reason: 'OK',
        headers: {
            'Supported': 'timer',
            'Min-SE': '300',
            'Session-Expires': '300;refresher=uac',
        },
    })

    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            msg: sip_msg({
                $rm: 'UPDATE',
                $rs: '200',
                $rr: 'OK',
                hdr_supported: 'timer',
		hdr_min_se: '300',
                hdr_session_expires: '300;refresher=uac',
            }),
        },
    ], 1000)

    sip.call.terminate(oc.id)

    // and wait for termination events
    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'BYE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
            }),
        },
        {
            event: 'call_ended',
            call_id: oc.id,
        },
        {
            event: 'call_ended',
            call_id: ic.id,
        },
    ], 1000)

    console.log("Success")

    sip.stop()
    process.exit(0)
}


test()
.catch(e => {
    console.error(e)
    process.exit(1)
})

