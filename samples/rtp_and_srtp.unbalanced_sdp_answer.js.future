const sip = require ('../index.js')
const Zeq = require('@mayama/zeq')
const m = require('data-matching')
const sip_msg = require('sip-matching')
const sdp = require('sdp-matching')

const sipjs = require('sipjs-lab')
const {endpoint, dialog} = require('sipjs-lab')

const util = require('util')

// here we create our Zeq instance
var z = new Zeq()

async function test() {
    sip.dtmf_aggregation_on(500)

    z.trap_events(sip.event_source, 'event', (evt) => {
        var e = evt.args[0]
        return e
    })

    z.trap_events(sipjs.event_source, 'event', (evt) => {
        var e = evt.args[0]
        return e
    })

    // Let's ignore '100 Trying'
    z.add_event_filter({
        event: 'response',
        msg: sip_msg({
            $rs: '100',
        }),
    })

    console.log(sip.start((data) => { console.log(data)} ))

    const t1 = sip.transport.create({address: "127.0.0.1"})

    const e1_port = 7070
    const e1 = endpoint.create({address: "127.0.0.1", port: e1_port, publicAddress: "127.0.0.1" })

    const oc = sip.call.create(t1.id, {from_uri: 'sip:alice@test.com', to_uri: `sip:bob@127.0.0.1:${e1_port}`,
        media: [
            {
                type: 'audio',
                secure: false,
            },
            {
                type: 'audio',
                secure: true,
            },
        ]})

    await z.wait([
        {
            source: 'sip_endpoint',
            endpoint_id: m.collect('endpoint_id'),
            req: m.collect('req', {
                method: 'INVITE',
                uri: 'sip:bob@127.0.0.1:7070',
                version: '2.0',
                headers: {
                    from: {
                        uri: 'sip:alice@test.com',
                    },
                    to: {
                        uri: 'sip:bob@127.0.0.1',
                    },
                },
                //content: 
            }),
            event: 'dialog_offer',
            dialog_id: m.collect('dialog_id'),
        },
    ], 1000)

    const sdp_answer =`v=0
o=- 3914707056 3914707057 IN IP4 0.0.0.0
s=pjmedia
t=0 0
m=audio 10004 RTP/SAVP 0 120
c=IN IP4 127.0.0.1
b=TIAS:64000
a=rtcp:10005 IN IP4 127.0.0.1
a=sendrecv
a=rtpmap:0 PCMU/8000
a=rtpmap:120 telephone-event/8000
a=fmtp:120 0-16
a=crypto:1 AES_256_CM_HMAC_SHA1_80 inline:s6nwVuVNxwupG0Cls+/4X4L46Mx/fqoEMolllUrx/FNCFpVjG2kGFLxPRGvMNw==`

    dialog.send_reply(
        z.store.dialog_id,
        z.store.req,
        {
            status: 200,
            reason: 'OK',
            headers: {
                'content-type': 'application/sdp',
            },
            content: sdp_answer,
        }
    )

    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
                '$(hdrcnt(VIA))': 1,
                $fU: 'alice',
                $fd: 'test.com',
                $tU: 'bob',
                '$hdr(content-type)': 'application/sdp',
                $rb: '!{_}a=sendrecv',
            }),
        },
        {
            event: 'media_update',
            call_id: oc.id,
            status: 'ok',
            media: m.fm([
              m.pm({
                type: 'audio',
                protocol: 'RTP/AVP',
                port: 0,
              }),
              m.pm({
                type: 'audio',
                protocol: 'RTP/SAVP',
                local: {
                  mode: 'sendrecv'
                },
                remote: {
                  mode: 'sendrecv'
                },
                fmt: [
                  '0 PCMU/8000',
                  '120 telephone-event/8000'
                ]
              }),
            ]),
        },
        {
            source: 'sip_endpoint',
            endpoint_id: z.store.endpoint_id,
            req: {
              method: 'ACK',
            },
            event: 'in_dialog_request',
            dialog_id: z.store.dialog_id
        },
    ], 1000)

    await z.sleep(1000)

    sip.call.terminate(oc.id)

    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'BYE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
            }),
        },
        {
            event: 'call_ended',
            call_id: oc.id,
        },
    ], 1000)

    console.log("Success")

    sip.stop()
}


test()
.catch(e => {
    console.error(e)
    process.exit(1)
})

