TODO: 

1) update code that creates/starts/stops/destroy media streams: DONE.

1a) must review code that generates response call->media and response SDP: for each media offered we need to provide a m= line in the same order as the offered but the ones that were refused must have port set to zero. Also we might need to reorder elements from the media in the call_response json (but basically we need to remove medias from a response bag as the offer is processed).

Draft:
  - when we process call_create (no matter if delayed_media is on or off) or call_respond with 183/2XX, we should generate the local sdp and send it or set it or save it in a field in struct Call
  - the call->media_neg should be deprecated.
  - instead we will create the media endpoints at call->media directly
  - when process on_media_update, we should iterate over the local active sdp and search for each element in call->media and remove the ones that were not accepted (port=0) and add the ones that are not present yet.

Draft2:
struct Call:
    pjmedia_sdp_session *local_sdp;

    pjmedia_sdp_session *active_local_sdp;
    pjmedia_sdp_session *active_remote_sdp;

call_create:
  - update_media_from_json
  - create local_sdp from media
  - store call->local_sdp
  - set offer with call->local_sdp if delayed_media=false

call_respond (183 or 2XX):
  - update_media_from_json
  - create local_sdp from media
  - store call->local_sdp
  
on_rx_offer2 (might be called due INVITE or '200 OK' in case of delayed_media):
  - set local_sdp as answer
  
on_media_update:
  - check active_local_sdp and active_remote_sdp (exit with PJ_SUCCESS if they didn't change)
  - update_media_from_active_local_sdp
  - iterate active_local_sdp and restart/remove each media if necessary


1b) after changes are done and confirmed to work, we should update the code to use pjmedia_sdp_session_cmp to check the active_local_sdp and active_remote_sdp (new fields in struct Call) to first check if there were media changes. if not, we can return from on_media_update without generating a media_update event as there were no changes. If there were changes we should check with pjmedia_sdp_media_cmp and only restart media endpoints for the ones that changed.

2) if 'media: []' or 'media: null' it means there is no media, so do not generate a body (content-length: 0)

3) create a sample script with automatic reply for INFO, OPTIONS etc.

4) review processing of SUBSCRIBE (SUBSCRIBE is a dialog-creating method, so we should be able to keep the subscription object and be able to send requests (INFO) for it.

5) set proper call to PJW_LOCK/PJW_UNLOCK in on_dtmf and on_inband_dtmf

6) if digit buffers have no more space generate an error for the channel so that it doesn't get unnoticed.

7) on_media_update: when doing "Processing call->media", I forgot that we need to rearrange the array to remove blank spots in the middle of it (it is not enough to remove elements)
