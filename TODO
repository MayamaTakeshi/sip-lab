TODO: 
-------------------------
when processing the on_media_update, we need to reorder the call->media based on the SDP, removing the inactive ones. This order is important because in the next item it will be possible to use parameter hold individually and we must have the proper order established so that the correct element can be acted upon.

-------------------------
need to allow hold parameter to each media independently (if parameter hold is absent on a media, the value of the parameter hold in the json options will be used (default is false).

-------------------------
we need to clone the active local/remote media for each MediaEndpoint of type audio/video using inv->pool_prov.
Then when on_media_update happens, we should compare them with the new active local/remote media and if they differ, we should restart the media endpoint.

-------------------------
the function:
    MediaEndpoint *find_media_by_json_descr(Call *call, Value &descr, bool in_use_chart[]) {
        // TODO
        return NULL;
    }

is not implemented (but it is being called) but this seems to not cause problems. Need to check.

-------------------------
the scripts samples/mrcp_and_audio.js and samples/mrcp_and_audio_switching_order.js were frequently crashing at the same point (on pjmedia when writing RTP).
This was solved by adding a z.sleep(1000) before call.terminate(). It seems it is caused by call termination being done too soon after reinvite.
We should check if this problem existed before (it might be a problem we added with the new multiple_media implementation).

-------------------------

after changes are done and confirmed to work, we should update the code to use pjmedia_sdp_session_cmp to check the active_local_sdp and active_remote_sdp (new fields in struct Call) to first check if there were media changes. if not, we can return from on_media_update without generating a media_update event as there were no changes. If there were changes we should check with pjmedia_sdp_media_cmp and only restart media endpoints for the ones that changed.

-------------------------
write tests for:
  - media position change. Ex:
      INVITE: [{type: 'mcrp'},{type: 'audio'}]
      200 OK: [{type: 'audio'},{type: 'mrcp'}]
  - removal of media
      INVITE: [{type: 'mcrp'},{type: 'audio'}]
      200 OK: [{type: 'audio'}]

-------------------------
if 'media: []' or 'media: null' it means there is no media, so do not generate a body (content-length: 0)

-------------------------
create a sample script with automatic reply for INFO, OPTIONS etc.

-------------------------
review processing of SUBSCRIBE (SUBSCRIBE is a dialog-creating method, so we should be able to keep the subscription object and be able to send requests (INFO) for it.

-------------------------
set proper call to PJW_LOCK/PJW_UNLOCK in on_dtmf and on_inband_dtmf

-------------------------
if digit buffers have no more space generate an error for the channel so that it doesn't get unnoticed.

-------------------------
on_media_update: when doing "Processing call->media", I forgot that we need to rearrange the array to remove blank spots in the middle of it (it is not enough to remove elements)

-------------------------
update to use invite session's pools (https://docs.pjsip.org/en/latest/api/generated/pjsip/group/group__PJSIP__INV.html)

-------------------------

