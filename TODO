TODO: 

1) update code that creates/starts/stops/destroy media streams: DONE.

1a) must review code that generates response call->media and response SDP: for each media offered we need to provide a m= line in the same order as the offered but the ones that were refused must have port set to zero. Also we might need to reorder elements from the media in the call_response json (but basically we need to remove medias from a response bag as the offer is processed).

Draft:
  - when we process call_create (no matter if delayed_media is on or off) or call_respond with 183/2XX, we should generate the local sdp and send it or set it or save it in a field in struct Call
  - the call->media_neg should be deprecated.
  - instead we will create the media endpoints at call->media directly
  - when process on_media_update, we should iterate over the local active sdp and search for each element in call->media and remove the ones that were not accepted (port=0) and add the ones that are not present yet.

Draft2:
struct Call:
  - Add:
     pjmedia_sdp_session *local_sdp;

     pjmedia_sdp_session *active_local_sdp;
     pjmedia_sdp_session *active_remote_sdp;

call_create:
  - update_media_from_json
  - create local_sdp from media
  - store call->local_sdp
  - set offer with call->local_sdp if delayed_media=false

call_respond (183 or 2XX):
  - update_media_from_json
  - create local_sdp from media
  - store call->local_sdp
  
on_rx_offer2 (might be called due INVITE or '200 OK' in case of delayed_media):
  - set local_sdp as answer
  
on_media_update:
  - check active_local_sdp and active_remote_sdp (exit with PJ_SUCCESS if they didn't change)
  - update_media_from_active_local_sdp
  - iterate active_local_sdp and restart/remove each media if necessary

obs: create_local_sdp must be changed to require the json document (media) and must generate the sdp based on what is specified there. So it must search call->media[] and use existing endpoints as from it (it is ensured that the endpoint will exist as call->media[] was previously updated based on it). It doesn't matter that the document might contain less items than call->media[] as we cannot remove elements from call->media[] till negotiation is done. We will remove elements (if necessary) from call->media upon on_media_update.
TODO: probably we can merge update_media_from_json with create_local_sdp as they are always called one after the other (we could replace them with function process_media(.., Document &d).

Draft for process_media:
  - create base_sdp
  - for each media in json media:
    - search if the media is present in call->media 
    - if no, generate pjmedia_sdp_media, add it to call->medi
    - add pjmedia_sdp_media do base_sdp
    - set in_use


IMPORTANT: 
The active local_sdp will have port=0 for the medias that were not accepted in the negotiation (no matter which side did the offer or answered).
So call->media[idx] must be removed.
However, since this will change the original port, the processing must be to search for each me in call->media and if not found then remove it.
So we don't need to actually check for port=0.

1b) we need clone the active local/remote media for each MediaEndpoint of type audio/video using inv->pool_prov.
Then when on_media_update happens, we should compare them with the new active local/remote media and if they differ, we should restart the media endpoint.


1c) need to allow hold parameter to each media independently (if parameter hold is absent on a media, the value of the parameter hold in the json options will be used (default is false).

1d) the function:

    MediaEndpoint *find_media_by_json_descr(Call *call, Value &descr, bool in_use_chart[]) {
        // TODO
        return NULL;
    }

is not implemented (but it is being called) but this seems to not cause problems. Need to check.

1e) it seems ddd.js and dddd.js frequently crash

1f) after changes are done and confirmed to work, we should update the code to use pjmedia_sdp_session_cmp to check the active_local_sdp and active_remote_sdp (new fields in struct Call) to first check if there were media changes. if not, we can return from on_media_update without generating a media_update event as there were no changes. If there were changes we should check with pjmedia_sdp_media_cmp and only restart media endpoints for the ones that changed.

1g) write tests for:
  - media position change. Ex:
      INVITE: [{type: 'mcrp'},{type: 'audio'}]
      200 OK: [{type: 'audio'},{type: 'mrcp'}]
  - removal of media
      INVITE: [{type: 'mcrp'},{type: 'audio'}]
      200 OK: [{type: 'audio'}]

2) if 'media: []' or 'media: null' it means there is no media, so do not generate a body (content-length: 0)

3) create a sample script with automatic reply for INFO, OPTIONS etc.

4) review processing of SUBSCRIBE (SUBSCRIBE is a dialog-creating method, so we should be able to keep the subscription object and be able to send requests (INFO) for it.

5) set proper call to PJW_LOCK/PJW_UNLOCK in on_dtmf and on_inband_dtmf

6) if digit buffers have no more space generate an error for the channel so that it doesn't get unnoticed.

7) on_media_update: when doing "Processing call->media", I forgot that we need to rearrange the array to remove blank spots in the middle of it (it is not enough to remove elements)

8) update to use invite session's pools (https://docs.pjsip.org/en/latest/api/generated/pjsip/group/group__PJSIP__INV.html)
